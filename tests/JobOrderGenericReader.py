#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri May 16 15:21:22 2014 by generateDS.py version 2.12d.
#
# Command line options:
#   ('-o', 'yeah.py')
#   ('-m', '')
#
# Command line arguments:
#   JobOrder.GENERIC.xsd
#
# Command line:
#   C:\Python27\Scripts\generateDS.py -o "yeah.py" -m JobOrder.GENERIC.xsd
#
# Current working directory (os.getcwd()):
#   tests
#

import base64
import datetime as datetime_
import re as re_
import sys

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_

    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_

        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_

            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_

                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_

                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc


#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data

        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data

        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data

        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')

        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data

        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data

        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data

        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data

        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data

        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data

        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data

        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0',):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data

        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path

        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            return None

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')


#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name,))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline,)
    else:
        msg = '%s (element %s)' % (msg, node.tag,)
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:  # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
            self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
            self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))

    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:  # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
              self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
              self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:  # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container

    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def set_data_type(self, data_type):
        self.data_type = data_type

    def get_data_type_chain(self):
        return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container):
        self.container = container

    def get_container(self):
        return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Data representation classes.
#


class Ipf_ConfType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Processor_Name=None, Version=None, Stdout_Log_Level=None, Stderr_Log_Level=None, Test=None,
                 Breakpoint_Enable=None, Acquisition_Station=None, Processing_Station=None, Config_Files=None,
                 Sensing_Time=None, Dynamic_Processing_Parameters=None):
        self.original_tagname_ = None
        self.Processor_Name = Processor_Name
        self.Version = Version
        self.Stdout_Log_Level = Stdout_Log_Level
        self.Stderr_Log_Level = Stderr_Log_Level
        self.Test = Test
        self.Breakpoint_Enable = Breakpoint_Enable
        self.Acquisition_Station = Acquisition_Station
        self.Processing_Station = Processing_Station
        self.Config_Files = Config_Files
        self.Sensing_Time = Sensing_Time
        self.Dynamic_Processing_Parameters = Dynamic_Processing_Parameters

    def factory(*args_, **kwargs_):
        if Ipf_ConfType.subclass:
            return Ipf_ConfType.subclass(*args_, **kwargs_)
        else:
            return Ipf_ConfType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Processor_Name(self):
        return self.Processor_Name

    def set_Processor_Name(self, Processor_Name):
        self.Processor_Name = Processor_Name

    Processor_NameProp = property(get_Processor_Name, set_Processor_Name)

    def get_Version(self):
        return self.Version

    def set_Version(self, Version):
        self.Version = Version

    VersionProp = property(get_Version, set_Version)

    def get_Stdout_Log_Level(self):
        return self.Stdout_Log_Level

    def set_Stdout_Log_Level(self, Stdout_Log_Level):
        self.Stdout_Log_Level = Stdout_Log_Level

    Stdout_Log_LevelProp = property(get_Stdout_Log_Level, set_Stdout_Log_Level)

    def get_Stderr_Log_Level(self):
        return self.Stderr_Log_Level

    def set_Stderr_Log_Level(self, Stderr_Log_Level):
        self.Stderr_Log_Level = Stderr_Log_Level

    Stderr_Log_LevelProp = property(get_Stderr_Log_Level, set_Stderr_Log_Level)

    def get_Test(self):
        return self.Test

    def set_Test(self, Test):
        self.Test = Test

    TestProp = property(get_Test, set_Test)

    def get_Breakpoint_Enable(self):
        return self.Breakpoint_Enable

    def set_Breakpoint_Enable(self, Breakpoint_Enable):
        self.Breakpoint_Enable = Breakpoint_Enable

    Breakpoint_EnableProp = property(get_Breakpoint_Enable, set_Breakpoint_Enable)

    def get_Acquisition_Station(self):
        return self.Acquisition_Station

    def set_Acquisition_Station(self, Acquisition_Station):
        self.Acquisition_Station = Acquisition_Station

    Acquisition_StationProp = property(get_Acquisition_Station, set_Acquisition_Station)

    def get_Processing_Station(self):
        return self.Processing_Station

    def set_Processing_Station(self, Processing_Station):
        self.Processing_Station = Processing_Station

    Processing_StationProp = property(get_Processing_Station, set_Processing_Station)

    def get_Config_Files(self):
        return self.Config_Files

    def set_Config_Files(self, Config_Files):
        self.Config_Files = Config_Files

    Config_FilesProp = property(get_Config_Files, set_Config_Files)

    def get_Sensing_Time(self):
        return self.Sensing_Time

    def set_Sensing_Time(self, Sensing_Time):
        self.Sensing_Time = Sensing_Time

    Sensing_TimeProp = property(get_Sensing_Time, set_Sensing_Time)

    def get_Dynamic_Processing_Parameters(self):
        return self.Dynamic_Processing_Parameters

    def set_Dynamic_Processing_Parameters(self, Dynamic_Processing_Parameters):
        self.Dynamic_Processing_Parameters = Dynamic_Processing_Parameters

    Dynamic_Processing_ParametersProp = property(get_Dynamic_Processing_Parameters, set_Dynamic_Processing_Parameters)

    def validate_Stdout_Log_LevelType(self, value):
        # Validate type Stdout_Log_LevelType, a restriction on xs:string.
        pass

    def validate_Stderr_Log_LevelType(self, value):
        # Validate type Stderr_Log_LevelType, a restriction on xs:string.
        pass

    def hasContent_(self):
        if (
            self.Processor_Name is not None or
            self.Version is not None or
            self.Stdout_Log_Level is not None or
            self.Stderr_Log_Level is not None or
            self.Test is not None or
            self.Breakpoint_Enable is not None or
            self.Acquisition_Station is not None or
            self.Processing_Station is not None or
            self.Config_Files is not None or
            self.Sensing_Time is not None or
            self.Dynamic_Processing_Parameters is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Ipf_ConfType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Ipf_ConfType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Ipf_ConfType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Ipf_ConfType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Ipf_ConfType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Processor_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessor_Name>%s</%sProcessor_Name>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Processor_Name).encode(ExternalEncoding), input_name='Processor_Name'), namespace_,
                                                                         eol_))
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersion>%s</%sVersion>%s' % (
            namespace_, self.gds_format_string(quote_xml(self.Version).encode(ExternalEncoding), input_name='Version'),
            namespace_, eol_))
        if self.Stdout_Log_Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStdout_Log_Level>%s</%sStdout_Log_Level>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Stdout_Log_Level).encode(ExternalEncoding), input_name='Stdout_Log_Level'), namespace_,
                                                                             eol_))
        if self.Stderr_Log_Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStderr_Log_Level>%s</%sStderr_Log_Level>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Stderr_Log_Level).encode(ExternalEncoding), input_name='Stderr_Log_Level'), namespace_,
                                                                             eol_))
        if self.Test is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTest>%s</%sTest>%s' % (
            namespace_, self.gds_format_string(quote_xml(self.Test).encode(ExternalEncoding), input_name='Test'),
            namespace_, eol_))
        if self.Breakpoint_Enable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBreakpoint_Enable>%s</%sBreakpoint_Enable>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Breakpoint_Enable).encode(ExternalEncoding), input_name='Breakpoint_Enable'), namespace_,
                                                                               eol_))
        if self.Acquisition_Station is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAcquisition_Station>%s</%sAcquisition_Station>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Acquisition_Station).encode(ExternalEncoding), input_name='Acquisition_Station'),
                                                                                   namespace_, eol_))
        if self.Processing_Station is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessing_Station>%s</%sProcessing_Station>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Processing_Station).encode(ExternalEncoding), input_name='Processing_Station'),
                                                                                 namespace_, eol_))
        if self.Config_Files is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfig_Files>%s</%sConfig_Files>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Config_Files).encode(ExternalEncoding), input_name='Config_Files'), namespace_, eol_))
        if self.Sensing_Time is not None:
            self.Sensing_Time.export(outfile, level, namespace_, name_='Sensing_Time', pretty_print=pretty_print)
        if self.Dynamic_Processing_Parameters is not None:
            self.Dynamic_Processing_Parameters.export(outfile, level, namespace_, name_='Dynamic_Processing_Parameters',
                                                      pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='Ipf_ConfType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        if self.Processor_Name is not None:
            showIndent(outfile, level)
            outfile.write('Processor_Name=%s,\n' % quote_python(self.Processor_Name).encode(ExternalEncoding))
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=%s,\n' % quote_python(self.Version).encode(ExternalEncoding))
        if self.Stdout_Log_Level is not None:
            showIndent(outfile, level)
            outfile.write('Stdout_Log_Level=%s,\n' % quote_python(self.Stdout_Log_Level).encode(ExternalEncoding))
        if self.Stderr_Log_Level is not None:
            showIndent(outfile, level)
            outfile.write('Stderr_Log_Level=%s,\n' % quote_python(self.Stderr_Log_Level).encode(ExternalEncoding))
        if self.Test is not None:
            showIndent(outfile, level)
            outfile.write('Test=%s,\n' % quote_python(self.Test).encode(ExternalEncoding))
        if self.Breakpoint_Enable is not None:
            showIndent(outfile, level)
            outfile.write('Breakpoint_Enable=%s,\n' % quote_python(self.Breakpoint_Enable).encode(ExternalEncoding))
        if self.Acquisition_Station is not None:
            showIndent(outfile, level)
            outfile.write('Acquisition_Station=%s,\n' % quote_python(self.Acquisition_Station).encode(ExternalEncoding))
        if self.Processing_Station is not None:
            showIndent(outfile, level)
            outfile.write('Processing_Station=%s,\n' % quote_python(self.Processing_Station).encode(ExternalEncoding))
        if self.Config_Files is not None:
            showIndent(outfile, level)
            outfile.write('Config_Files=%s,\n' % quote_python(self.Config_Files).encode(ExternalEncoding))
        if self.Sensing_Time is not None:
            showIndent(outfile, level)
            outfile.write('Sensing_Time=model_.Sensing_TimeType(\n')
            self.Sensing_Time.exportLiteral(outfile, level, name_='Sensing_Time')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Dynamic_Processing_Parameters is not None:
            showIndent(outfile, level)
            outfile.write('Dynamic_Processing_Parameters=model_.Dynamic_Processing_ParametersType(\n')
            self.Dynamic_Processing_Parameters.exportLiteral(outfile, level, name_='Dynamic_Processing_Parameters')
            showIndent(outfile, level)
            outfile.write('),\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Processor_Name':
            Processor_Name_ = child_.text
            Processor_Name_ = self.gds_validate_string(Processor_Name_, node, 'Processor_Name')
            self.Processor_Name = Processor_Name_
        elif nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
        elif nodeName_ == 'Stdout_Log_Level':
            Stdout_Log_Level_ = child_.text
            Stdout_Log_Level_ = self.gds_validate_string(Stdout_Log_Level_, node, 'Stdout_Log_Level')
            self.Stdout_Log_Level = Stdout_Log_Level_
            self.validate_Stdout_Log_LevelType(self.Stdout_Log_Level)  # validate type Stdout_Log_LevelType
        elif nodeName_ == 'Stderr_Log_Level':
            Stderr_Log_Level_ = child_.text
            Stderr_Log_Level_ = self.gds_validate_string(Stderr_Log_Level_, node, 'Stderr_Log_Level')
            self.Stderr_Log_Level = Stderr_Log_Level_
            self.validate_Stderr_Log_LevelType(self.Stderr_Log_Level)  # validate type Stderr_Log_LevelType
        elif nodeName_ == 'Test':
            Test_ = child_.text
            Test_ = self.gds_validate_string(Test_, node, 'Test')
            self.Test = Test_
        elif nodeName_ == 'Breakpoint_Enable':
            Breakpoint_Enable_ = child_.text
            Breakpoint_Enable_ = self.gds_validate_string(Breakpoint_Enable_, node, 'Breakpoint_Enable')
            self.Breakpoint_Enable = Breakpoint_Enable_
        elif nodeName_ == 'Acquisition_Station':
            Acquisition_Station_ = child_.text
            Acquisition_Station_ = self.gds_validate_string(Acquisition_Station_, node, 'Acquisition_Station')
            self.Acquisition_Station = Acquisition_Station_
        elif nodeName_ == 'Processing_Station':
            Processing_Station_ = child_.text
            Processing_Station_ = self.gds_validate_string(Processing_Station_, node, 'Processing_Station')
            self.Processing_Station = Processing_Station_
        elif nodeName_ == 'Config_Files':
            Config_Files_ = child_.text
            Config_Files_ = self.gds_validate_string(Config_Files_, node, 'Config_Files')
            self.Config_Files = Config_Files_
        elif nodeName_ == 'Sensing_Time':
            obj_ = Sensing_TimeType.factory()
            obj_.build(child_)
            self.Sensing_Time = obj_
            obj_.original_tagname_ = 'Sensing_Time'
        elif nodeName_ == 'Dynamic_Processing_Parameters':
            obj_ = Dynamic_Processing_ParametersType.factory()
            obj_.build(child_)
            self.Dynamic_Processing_Parameters = obj_
            obj_.original_tagname_ = 'Dynamic_Processing_Parameters'


# end class Ipf_ConfType


class Ipf_ProcType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Task_Name=None, Task_Version=None, List_of_Inputs=None, List_of_Outputs=None):
        self.original_tagname_ = None
        self.Task_Name = Task_Name
        self.Task_Version = Task_Version
        self.List_of_Inputs = List_of_Inputs
        self.List_of_Outputs = List_of_Outputs

    def factory(*args_, **kwargs_):
        if Ipf_ProcType.subclass:
            return Ipf_ProcType.subclass(*args_, **kwargs_)
        else:
            return Ipf_ProcType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Task_Name(self):
        return self.Task_Name

    def set_Task_Name(self, Task_Name):
        self.Task_Name = Task_Name

    Task_NameProp = property(get_Task_Name, set_Task_Name)

    def get_Task_Version(self):
        return self.Task_Version

    def set_Task_Version(self, Task_Version):
        self.Task_Version = Task_Version

    Task_VersionProp = property(get_Task_Version, set_Task_Version)

    def get_List_of_Inputs(self):
        return self.List_of_Inputs

    def set_List_of_Inputs(self, List_of_Inputs):
        self.List_of_Inputs = List_of_Inputs

    List_of_InputsProp = property(get_List_of_Inputs, set_List_of_Inputs)

    def get_List_of_Outputs(self):
        return self.List_of_Outputs

    def set_List_of_Outputs(self, List_of_Outputs):
        self.List_of_Outputs = List_of_Outputs

    List_of_OutputsProp = property(get_List_of_Outputs, set_List_of_Outputs)

    def hasContent_(self):
        if (
            self.Task_Name is not None or
            self.Task_Version is not None or
            self.List_of_Inputs is not None or
            self.List_of_Outputs is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Ipf_ProcType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Ipf_ProcType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Ipf_ProcType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Ipf_ProcType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Ipf_ProcType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Task_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTask_Name>%s</%sTask_Name>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Task_Name).encode(ExternalEncoding), input_name='Task_Name'), namespace_, eol_))
        if self.Task_Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTask_Version>%s</%sTask_Version>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.Task_Version).encode(ExternalEncoding), input_name='Task_Version'), namespace_, eol_))
        if self.List_of_Inputs is not None:
            self.List_of_Inputs.export(outfile, level, namespace_, name_='List_of_Inputs', pretty_print=pretty_print)
        if self.List_of_Outputs is not None:
            self.List_of_Outputs.export(outfile, level, namespace_, name_='List_of_Outputs', pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='Ipf_ProcType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        if self.Task_Name is not None:
            showIndent(outfile, level)
            outfile.write('Task_Name=%s,\n' % quote_python(self.Task_Name).encode(ExternalEncoding))
        if self.Task_Version is not None:
            showIndent(outfile, level)
            outfile.write('Task_Version=%s,\n' % quote_python(self.Task_Version).encode(ExternalEncoding))
        if self.List_of_Inputs is not None:
            showIndent(outfile, level)
            outfile.write('List_of_Inputs=model_.List_of_InputsType(\n')
            self.List_of_Inputs.exportLiteral(outfile, level, name_='List_of_Inputs')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.List_of_Outputs is not None:
            showIndent(outfile, level)
            outfile.write('List_of_Outputs=model_.List_of_OutputsType(\n')
            self.List_of_Outputs.exportLiteral(outfile, level, name_='List_of_Outputs')
            showIndent(outfile, level)
            outfile.write('),\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Task_Name':
            Task_Name_ = child_.text
            Task_Name_ = self.gds_validate_string(Task_Name_, node, 'Task_Name')
            self.Task_Name = Task_Name_
        elif nodeName_ == 'Task_Version':
            Task_Version_ = child_.text
            Task_Version_ = self.gds_validate_string(Task_Version_, node, 'Task_Version')
            self.Task_Version = Task_Version_
        elif nodeName_ == 'List_of_Inputs':
            obj_ = List_of_InputsType.factory()
            obj_.build(child_)
            self.List_of_Inputs = obj_
            obj_.original_tagname_ = 'List_of_Inputs'
        elif nodeName_ == 'List_of_Outputs':
            obj_ = List_of_OutputsType.factory()
            obj_.build(child_)
            self.List_of_Outputs = obj_
            obj_.original_tagname_ = 'List_of_Outputs'


# end class Ipf_ProcType


class Sensing_TimeType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Start=None, Stop=None):
        self.original_tagname_ = None
        self.Start = Start
        self.Stop = Stop

    def factory(*args_, **kwargs_):
        if Sensing_TimeType.subclass:
            return Sensing_TimeType.subclass(*args_, **kwargs_)
        else:
            return Sensing_TimeType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Start(self):
        return self.Start

    def set_Start(self, Start):
        self.Start = Start

    StartProp = property(get_Start, set_Start)

    def get_Stop(self):
        return self.Stop

    def set_Stop(self, Stop):
        self.Stop = Stop

    StopProp = property(get_Stop, set_Stop)

    def hasContent_(self):
        if (
            self.Start is not None or
            self.Stop is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Sensing_TimeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Sensing_TimeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Sensing_TimeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Sensing_TimeType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Sensing_TimeType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStart>%s</%sStart>%s' % (
            namespace_, self.gds_format_string(quote_xml(self.Start).encode(ExternalEncoding), input_name='Start'),
            namespace_, eol_))
        if self.Stop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStop>%s</%sStop>%s' % (
            namespace_, self.gds_format_string(quote_xml(self.Stop).encode(ExternalEncoding), input_name='Stop'),
            namespace_, eol_))

    def exportLiteral(self, outfile, level, name_='Sensing_TimeType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        if self.Start is not None:
            showIndent(outfile, level)
            outfile.write('Start=%s,\n' % quote_python(self.Start).encode(ExternalEncoding))
        if self.Stop is not None:
            showIndent(outfile, level)
            outfile.write('Stop=%s,\n' % quote_python(self.Stop).encode(ExternalEncoding))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Start':
            Start_ = child_.text
            Start_ = self.gds_validate_string(Start_, node, 'Start')
            self.Start = Start_
        elif nodeName_ == 'Stop':
            Stop_ = child_.text
            Stop_ = self.gds_validate_string(Stop_, node, 'Stop')
            self.Stop = Stop_


# end class Sensing_TimeType


class InputType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, File_Type=None, File_Name_Type=None, List_of_File_Names=None):
        self.original_tagname_ = None
        self.File_Type = File_Type
        self.File_Name_Type = File_Name_Type
        self.List_of_File_Names = List_of_File_Names

    def factory(*args_, **kwargs_):
        if InputType.subclass:
            return InputType.subclass(*args_, **kwargs_)
        else:
            return InputType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_File_Type(self):
        return self.File_Type

    def set_File_Type(self, File_Type):
        self.File_Type = File_Type

    File_TypeProp = property(get_File_Type, set_File_Type)

    def get_File_Name_Type(self):
        return self.File_Name_Type

    def set_File_Name_Type(self, File_Name_Type):
        self.File_Name_Type = File_Name_Type

    File_Name_TypeProp = property(get_File_Name_Type, set_File_Name_Type)

    def get_List_of_File_Names(self):
        return self.List_of_File_Names

    def set_List_of_File_Names(self, List_of_File_Names):
        self.List_of_File_Names = List_of_File_Names

    List_of_File_NamesProp = property(get_List_of_File_Names, set_List_of_File_Names)

    def validate_File_Name_TypeType(self, value):
        # Validate type File_Name_TypeType, a restriction on xs:string.
        pass

    def hasContent_(self):
        if (
            self.File_Type is not None or
            self.File_Name_Type is not None or
            self.List_of_File_Names is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='InputType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InputType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InputType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InputType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='InputType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFile_Type>%s</%sFile_Type>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.File_Type).encode(ExternalEncoding), input_name='File_Type'), namespace_, eol_))
        if self.File_Name_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFile_Name_Type>%s</%sFile_Name_Type>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.File_Name_Type).encode(ExternalEncoding), input_name='File_Name_Type'), namespace_,
                                                                         eol_))
        if self.List_of_File_Names is not None:
            self.List_of_File_Names.export(outfile, level, namespace_, name_='List_of_File_Names',
                                           pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='InputType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        if self.File_Type is not None:
            showIndent(outfile, level)
            outfile.write('File_Type=%s,\n' % quote_python(self.File_Type).encode(ExternalEncoding))
        if self.File_Name_Type is not None:
            showIndent(outfile, level)
            outfile.write('File_Name_Type=%s,\n' % quote_python(self.File_Name_Type).encode(ExternalEncoding))
        if self.List_of_File_Names is not None:
            showIndent(outfile, level)
            outfile.write('List_of_File_Names=model_.List_of_File_NamesType(\n')
            self.List_of_File_Names.exportLiteral(outfile, level, name_='List_of_File_Names')
            showIndent(outfile, level)
            outfile.write('),\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_Type':
            File_Type_ = child_.text
            File_Type_ = self.gds_validate_string(File_Type_, node, 'File_Type')
            self.File_Type = File_Type_
        elif nodeName_ == 'File_Name_Type':
            File_Name_Type_ = child_.text
            File_Name_Type_ = self.gds_validate_string(File_Name_Type_, node, 'File_Name_Type')
            self.File_Name_Type = File_Name_Type_
            self.validate_File_Name_TypeType(self.File_Name_Type)  # validate type File_Name_TypeType
        elif nodeName_ == 'List_of_File_Names':
            obj_ = List_of_File_NamesType.factory()
            obj_.build(child_)
            self.List_of_File_Names = obj_
            obj_.original_tagname_ = 'List_of_File_Names'


# end class InputType


class Processing_ParameterType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Name=None, Value=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Value = Value

    def factory(*args_, **kwargs_):
        if Processing_ParameterType.subclass:
            return Processing_ParameterType.subclass(*args_, **kwargs_)
        else:
            return Processing_ParameterType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Name(self):
        return self.Name

    def set_Name(self, Name):
        self.Name = Name

    NameProp = property(get_Name, set_Name)

    def get_Value(self):
        return self.Value

    def set_Value(self, Value):
        self.Value = Value

    ValueProp = property(get_Value, set_Value)

    def validate_NameType(self, value):
        # Validate type NameType, a restriction on xs:string.
        pass

    def validate_ValueType(self, value):
        # Validate type ValueType, a restriction on xs:string.
        pass

    def hasContent_(self):
        if (
            self.Name is not None or
            self.Value is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Processing_ParameterType', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Processing_ParameterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Processing_ParameterType',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Processing_ParameterType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Processing_ParameterType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (
            namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'),
            namespace_, eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (
            namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'),
            namespace_, eol_))

    def exportLiteral(self, outfile, level, name_='Processing_ParameterType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
            self.validate_NameType(self.Name)  # validate type NameType
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
            self.validate_ValueType(self.Value)  # validate type ValueType


# end class Processing_ParameterType


class Ipf_Job_OrderType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Ipf_Conf=None, List_of_Ipf_Procs=None):
        self.original_tagname_ = None
        self.Ipf_Conf = Ipf_Conf
        self.List_of_Ipf_Procs = List_of_Ipf_Procs

    def factory(*args_, **kwargs_):
        if Ipf_Job_OrderType.subclass:
            return Ipf_Job_OrderType.subclass(*args_, **kwargs_)
        else:
            return Ipf_Job_OrderType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Ipf_Conf(self):
        return self.Ipf_Conf

    def set_Ipf_Conf(self, Ipf_Conf):
        self.Ipf_Conf = Ipf_Conf

    Ipf_ConfProp = property(get_Ipf_Conf, set_Ipf_Conf)

    def get_List_of_Ipf_Procs(self):
        return self.List_of_Ipf_Procs

    def set_List_of_Ipf_Procs(self, List_of_Ipf_Procs):
        self.List_of_Ipf_Procs = List_of_Ipf_Procs

    List_of_Ipf_ProcsProp = property(get_List_of_Ipf_Procs, set_List_of_Ipf_Procs)

    def hasContent_(self):
        if (
            self.Ipf_Conf is not None or
            self.List_of_Ipf_Procs is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Ipf_Job_OrderType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Ipf_Job_OrderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Ipf_Job_OrderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Ipf_Job_OrderType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Ipf_Job_OrderType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Ipf_Conf is not None:
            self.Ipf_Conf.export(outfile, level, namespace_, name_='Ipf_Conf', pretty_print=pretty_print)
        if self.List_of_Ipf_Procs is not None:
            self.List_of_Ipf_Procs.export(outfile, level, namespace_, name_='List_of_Ipf_Procs',
                                          pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='Ipf_Job_OrderType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        if self.Ipf_Conf is not None:
            showIndent(outfile, level)
            outfile.write('Ipf_Conf=model_.Ipf_ConfType(\n')
            self.Ipf_Conf.exportLiteral(outfile, level, name_='Ipf_Conf')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.List_of_Ipf_Procs is not None:
            showIndent(outfile, level)
            outfile.write('List_of_Ipf_Procs=model_.List_of_Ipf_ProcsType(\n')
            self.List_of_Ipf_Procs.exportLiteral(outfile, level, name_='List_of_Ipf_Procs')
            showIndent(outfile, level)
            outfile.write('),\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Ipf_Conf':
            obj_ = Ipf_ConfType.factory()
            obj_.build(child_)
            self.Ipf_Conf = obj_
            obj_.original_tagname_ = 'Ipf_Conf'
        elif nodeName_ == 'List_of_Ipf_Procs':
            obj_ = List_of_Ipf_ProcsType.factory()
            obj_.build(child_)
            self.List_of_Ipf_Procs = obj_
            obj_.original_tagname_ = 'List_of_Ipf_Procs'


# end class Ipf_Job_OrderType


class OutputType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, mandatory=None, File_Type=None, File_Name_Type=None, File_Name=None):
        self.original_tagname_ = None
        self.mandatory = _cast(None, mandatory)
        self.File_Type = File_Type
        self.File_Name_Type = File_Name_Type
        self.File_Name = File_Name

    def factory(*args_, **kwargs_):
        if OutputType.subclass:
            return OutputType.subclass(*args_, **kwargs_)
        else:
            return OutputType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_File_Type(self):
        return self.File_Type

    def set_File_Type(self, File_Type):
        self.File_Type = File_Type

    File_TypeProp = property(get_File_Type, set_File_Type)

    def get_File_Name_Type(self):
        return self.File_Name_Type

    def set_File_Name_Type(self, File_Name_Type):
        self.File_Name_Type = File_Name_Type

    File_Name_TypeProp = property(get_File_Name_Type, set_File_Name_Type)

    def get_File_Name(self):
        return self.File_Name

    def set_File_Name(self, File_Name):
        self.File_Name = File_Name

    File_NameProp = property(get_File_Name, set_File_Name)

    def get_mandatory(self):
        return self.mandatory

    def set_mandatory(self, mandatory):
        self.mandatory = mandatory

    mandatoryProp = property(get_mandatory, set_mandatory)

    def validate_File_TypeType(self, value):
        # Validate type File_TypeType, a restriction on xs:string.
        pass

    def validate_File_Name_TypeType1(self, value):
        # Validate type File_Name_TypeType1, a restriction on xs:string.
        pass

    def hasContent_(self):
        if (
            self.File_Type is not None or
            self.File_Name_Type is not None or
            self.File_Name is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='OutputType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OutputType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OutputType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OutputType'):
        if self.mandatory is not None and 'mandatory' not in already_processed:
            already_processed.add('mandatory')
            outfile.write(' mandatory=%s' % (
            self.gds_format_string(quote_attrib(self.mandatory).encode(ExternalEncoding), input_name='mandatory'),))

    def exportChildren(self, outfile, level, namespace_='', name_='OutputType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFile_Type>%s</%sFile_Type>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.File_Type).encode(ExternalEncoding), input_name='File_Type'), namespace_, eol_))
        if self.File_Name_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFile_Name_Type>%s</%sFile_Name_Type>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.File_Name_Type).encode(ExternalEncoding), input_name='File_Name_Type'), namespace_,
                                                                         eol_))
        if self.File_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFile_Name>%s</%sFile_Name>%s' % (namespace_, self.gds_format_string(
                quote_xml(self.File_Name).encode(ExternalEncoding), input_name='File_Name'), namespace_, eol_))

    def exportLiteral(self, outfile, level, name_='OutputType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.mandatory is not None and 'mandatory' not in already_processed:
            already_processed.add('mandatory')
            showIndent(outfile, level)
            outfile.write('mandatory="%s",\n' % (self.mandatory,))

    def exportLiteralChildren(self, outfile, level, name_):
        if self.File_Type is not None:
            showIndent(outfile, level)
            outfile.write('File_Type=%s,\n' % quote_python(self.File_Type).encode(ExternalEncoding))
        if self.File_Name_Type is not None:
            showIndent(outfile, level)
            outfile.write('File_Name_Type=%s,\n' % quote_python(self.File_Name_Type).encode(ExternalEncoding))
        if self.File_Name is not None:
            showIndent(outfile, level)
            outfile.write('File_Name=%s,\n' % quote_python(self.File_Name).encode(ExternalEncoding))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('mandatory', node)
        if value is not None and 'mandatory' not in already_processed:
            already_processed.add('mandatory')
            self.mandatory = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_Type':
            File_Type_ = child_.text
            File_Type_ = self.gds_validate_string(File_Type_, node, 'File_Type')
            self.File_Type = File_Type_
            self.validate_File_TypeType(self.File_Type)  # validate type File_TypeType
        elif nodeName_ == 'File_Name_Type':
            File_Name_Type_ = child_.text
            File_Name_Type_ = self.gds_validate_string(File_Name_Type_, node, 'File_Name_Type')
            self.File_Name_Type = File_Name_Type_
            self.validate_File_Name_TypeType1(self.File_Name_Type)  # validate type File_Name_TypeType1
        elif nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name = File_Name_


# end class OutputType


class List_of_Ipf_ProcsType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, count=None, Ipf_Proc=None):
        self.original_tagname_ = None
        self.count = _cast(None, count)
        self.Ipf_Proc = Ipf_Proc

    def factory(*args_, **kwargs_):
        if List_of_Ipf_ProcsType.subclass:
            return List_of_Ipf_ProcsType.subclass(*args_, **kwargs_)
        else:
            return List_of_Ipf_ProcsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Ipf_Proc(self):
        return self.Ipf_Proc

    def set_Ipf_Proc(self, Ipf_Proc):
        self.Ipf_Proc = Ipf_Proc

    Ipf_ProcProp = property(get_Ipf_Proc, set_Ipf_Proc)

    def get_count(self):
        return self.count

    def set_count(self, count):
        self.count = count

    countProp = property(get_count, set_count)

    def hasContent_(self):
        if (
            self.Ipf_Proc is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='List_of_Ipf_ProcsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_Ipf_ProcsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_Ipf_ProcsType',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_Ipf_ProcsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count=%s' % (
            self.gds_format_string(quote_attrib(self.count).encode(ExternalEncoding), input_name='count'),))

    def exportChildren(self, outfile, level, namespace_='', name_='List_of_Ipf_ProcsType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Ipf_Proc is not None:
            self.Ipf_Proc.export(outfile, level, namespace_, name_='Ipf_Proc', pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='List_of_Ipf_ProcsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            showIndent(outfile, level)
            outfile.write('count="%s",\n' % (self.count,))

    def exportLiteralChildren(self, outfile, level, name_):
        if self.Ipf_Proc is not None:
            showIndent(outfile, level)
            outfile.write('Ipf_Proc=model_.Ipf_ProcType(\n')
            self.Ipf_Proc.exportLiteral(outfile, level, name_='Ipf_Proc')
            showIndent(outfile, level)
            outfile.write('),\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            self.count = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Ipf_Proc':
            obj_ = Ipf_ProcType.factory()
            obj_.build(child_)
            self.Ipf_Proc = obj_
            obj_.original_tagname_ = 'Ipf_Proc'


# end class List_of_Ipf_ProcsType


class List_of_OutputsType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, count=None, Output=None):
        self.original_tagname_ = None
        self.count = _cast(None, count)
        if Output is None:
            self.Output = []
        else:
            self.Output = Output

    def factory(*args_, **kwargs_):
        if List_of_OutputsType.subclass:
            return List_of_OutputsType.subclass(*args_, **kwargs_)
        else:
            return List_of_OutputsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Output(self):
        return self.Output

    def set_Output(self, Output):
        self.Output = Output

    def add_Output(self, value):
        self.Output.append(value)

    def insert_Output(self, index, value):
        self.Output[index] = value

    OutputProp = property(get_Output, set_Output)

    def get_count(self):
        return self.count

    def set_count(self, count):
        self.count = count

    countProp = property(get_count, set_count)

    def hasContent_(self):
        if (
            self.Output
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='List_of_OutputsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_OutputsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_OutputsType',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_OutputsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count=%s' % (
            self.gds_format_string(quote_attrib(self.count).encode(ExternalEncoding), input_name='count'),))

    def exportChildren(self, outfile, level, namespace_='', name_='List_of_OutputsType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Output_ in self.Output:
            Output_.export(outfile, level, namespace_, name_='Output', pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='List_of_OutputsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            showIndent(outfile, level)
            outfile.write('count="%s",\n' % (self.count,))

    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Output=[\n')
        level += 1
        for Output_ in self.Output:
            showIndent(outfile, level)
            outfile.write('model_.OutputType(\n')
            Output_.exportLiteral(outfile, level, name_='OutputType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            self.count = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Output':
            obj_ = OutputType.factory()
            obj_.build(child_)
            self.Output.append(obj_)
            obj_.original_tagname_ = 'Output'


# end class List_of_OutputsType


class List_of_File_NamesType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, count=None, File_Name=None):
        self.original_tagname_ = None
        self.count = _cast(None, count)
        if File_Name is None:
            self.File_Name = []
        else:
            self.File_Name = File_Name

    def factory(*args_, **kwargs_):
        if List_of_File_NamesType.subclass:
            return List_of_File_NamesType.subclass(*args_, **kwargs_)
        else:
            return List_of_File_NamesType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_File_Name(self):
        return self.File_Name

    def set_File_Name(self, File_Name):
        self.File_Name = File_Name

    def add_File_Name(self, value):
        self.File_Name.append(value)

    def insert_File_Name(self, index, value):
        self.File_Name[index] = value

    File_NameProp = property(get_File_Name, set_File_Name)

    def get_count(self):
        return self.count

    def set_count(self, count):
        self.count = count

    countProp = property(get_count, set_count)

    def hasContent_(self):
        if (
            self.File_Name
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='List_of_File_NamesType', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_File_NamesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_File_NamesType',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_File_NamesType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count=%s' % (
            self.gds_format_string(quote_attrib(self.count).encode(ExternalEncoding), input_name='count'),))

    def exportChildren(self, outfile, level, namespace_='', name_='List_of_File_NamesType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for File_Name_ in self.File_Name:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFile_Name>%s</%sFile_Name>%s' % (
            namespace_, self.gds_format_string(quote_xml(File_Name_).encode(ExternalEncoding), input_name='File_Name'),
            namespace_, eol_))

    def exportLiteral(self, outfile, level, name_='List_of_File_NamesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            showIndent(outfile, level)
            outfile.write('count="%s",\n' % (self.count,))

    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('File_Name=[\n')
        level += 1
        for File_Name_ in self.File_Name:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(File_Name_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            self.count = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name.append(File_Name_)


# end class List_of_File_NamesType


class Dynamic_Processing_ParametersType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Processing_Parameter=None):
        self.original_tagname_ = None
        if Processing_Parameter is None:
            self.Processing_Parameter = []
        else:
            self.Processing_Parameter = Processing_Parameter

    def factory(*args_, **kwargs_):
        if Dynamic_Processing_ParametersType.subclass:
            return Dynamic_Processing_ParametersType.subclass(*args_, **kwargs_)
        else:
            return Dynamic_Processing_ParametersType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Processing_Parameter(self):
        return self.Processing_Parameter

    def set_Processing_Parameter(self, Processing_Parameter):
        self.Processing_Parameter = Processing_Parameter

    def add_Processing_Parameter(self, value):
        self.Processing_Parameter.append(value)

    def insert_Processing_Parameter(self, index, value):
        self.Processing_Parameter[index] = value

    Processing_ParameterProp = property(get_Processing_Parameter, set_Processing_Parameter)

    def hasContent_(self):
        if (
            self.Processing_Parameter
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='Dynamic_Processing_ParametersType', namespacedef_='',
               pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dynamic_Processing_ParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Dynamic_Processing_ParametersType',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='',
                         name_='Dynamic_Processing_ParametersType'):
        pass

    def exportChildren(self, outfile, level, namespace_='', name_='Dynamic_Processing_ParametersType',
                       fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Processing_Parameter_ in self.Processing_Parameter:
            Processing_Parameter_.export(outfile, level, namespace_, name_='Processing_Parameter',
                                         pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='Dynamic_Processing_ParametersType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass

    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Processing_Parameter=[\n')
        level += 1
        for Processing_Parameter_ in self.Processing_Parameter:
            showIndent(outfile, level)
            outfile.write('model_.Processing_ParameterType(\n')
            Processing_Parameter_.exportLiteral(outfile, level, name_='Processing_ParameterType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Processing_Parameter':
            obj_ = Processing_ParameterType.factory()
            obj_.build(child_)
            self.Processing_Parameter.append(obj_)
            obj_.original_tagname_ = 'Processing_Parameter'


# end class Dynamic_Processing_ParametersType


class List_of_InputsType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, count=None, Input=None):
        self.original_tagname_ = None
        self.count = _cast(None, count)
        if Input is None:
            self.Input = []
        else:
            self.Input = Input

    def factory(*args_, **kwargs_):
        if List_of_InputsType.subclass:
            return List_of_InputsType.subclass(*args_, **kwargs_)
        else:
            return List_of_InputsType(*args_, **kwargs_)

    factory = staticmethod(factory)

    def get_Input(self):
        return self.Input

    def set_Input(self, Input):
        self.Input = Input

    def add_Input(self, value):
        self.Input.append(value)

    def insert_Input(self, index, value):
        self.Input[index] = value

    InputProp = property(get_Input, set_Input)

    def get_count(self):
        return self.count

    def set_count(self, count):
        self.count = count

    countProp = property(get_count, set_count)

    def hasContent_(self):
        if (
            self.Input
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='List_of_InputsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '',))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_InputsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_,))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_InputsType',
                                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_,))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_InputsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count=%s' % (
            self.gds_format_string(quote_attrib(self.count).encode(ExternalEncoding), input_name='count'),))

    def exportChildren(self, outfile, level, namespace_='', name_='List_of_InputsType', fromsubclass_=False,
                       pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Input_ in self.Input:
            Input_.export(outfile, level, namespace_, name_='Input', pretty_print=pretty_print)

    def exportLiteral(self, outfile, level, name_='List_of_InputsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)

    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            showIndent(outfile, level)
            outfile.write('count="%s",\n' % (self.count,))

    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Input=[\n')
        level += 1
        for Input_ in self.Input:
            showIndent(outfile, level)
            outfile.write('model_.InputType(\n')
            Input_.exportLiteral(outfile, level, name_='InputType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            self.count = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Input':
            obj_ = InputType.factory()
            obj_.build(child_)
            self.Input.append(obj_)
            obj_.original_tagname_ = 'Input'


# end class List_of_InputsType


GDSClassesMapping = {
    'Input': InputType,
    'Dynamic_Processing_Parameters': Dynamic_Processing_ParametersType,
    'Ipf_Job_Order': Ipf_Job_OrderType,
    'Processing_Parameter': Processing_ParameterType,
    'Sensing_Time': Sensing_TimeType,
    'List_of_Inputs': List_of_InputsType,
    'Output': OutputType,
    'List_of_Outputs': List_of_OutputsType,
    'List_of_Ipf_Procs': List_of_Ipf_ProcsType,
    'Ipf_Conf': Ipf_ConfType,
    'Ipf_Proc': Ipf_ProcType,
    'List_of_File_Names': List_of_File_NamesType,
}

USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Ipf_Job_OrderType'
        rootClass = Ipf_Job_OrderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Ipf_Job_OrderType'
        rootClass = Ipf_Job_OrderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Ipf_Job_OrderType'
        rootClass = Ipf_Job_OrderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Ipf_Job_OrderType'
        rootClass = Ipf_Job_OrderType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from yeah import *\n\n')
        sys.stdout.write('import yeah as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    # import pdb; pdb.set_trace()
    main()

__all__ = [
    "Dynamic_Processing_ParametersType",
    "InputType",
    "Ipf_ConfType",
    "Ipf_Job_OrderType",
    "Ipf_ProcType",
    "List_of_File_NamesType",
    "List_of_InputsType",
    "List_of_Ipf_ProcsType",
    "List_of_OutputsType",
    "OutputType",
    "Processing_ParameterType",
    "Sensing_TimeType"
]
