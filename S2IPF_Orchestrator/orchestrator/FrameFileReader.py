# coding=utf-8
#   _________________ .________________________
#  /   _____/\_____  \|   \______   \_   _____/
#  \_____  \  /  ____/|   ||     ___/|    __)
#  /        \/       \|   ||    |    |     \
# /_______  /\_______ \___||____|    \___  /
#         \/         \/                  \/
# ________                .__                     __                 __
# \_____  \_______   ____ |  |__   ____   _______/  |_____________ _/  |_  ___________
#  /   |   \_  __ \_/ ___\|  |  \_/ __ \ /  ___/\   __\_  __ \__  \\   __\/  _ \_  __ \
# /    |    \  | \/\  \___|   Y  \  ___/ \___ \  |  |  |  | \// __ \|  | (  <_> )  | \/
# \_______  /__|    \___  >___|  /\___  >____  > |__|  |__|  (____  /__|  \____/|__|
#         \/            \/     \/     \/     \/                   \/
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# author : Esquis Benjamin for CSGroup
#

#
# Generated Mon Oct 20 21:13:15 2014 by generateDS.py version 2.13a.
#
# Command line options:
#   ('-o', 'FrameFileReader.py')
#
# Command line arguments:
#   ../../data/xsd/GENERATION_SCHEMAS/ICD/DICO/1.0/IPF/ipf/File_Frame_File.xsd
#
# Command line:
#   /usr/bin/generateDS.py -o "FrameFileReader.py" ../../data/xsd/GENERATION_SCHEMAS/ICD/DICO/1.0/IPF/ipf/File_Frame_File.xsd
#
# Current working directory (os.getcwd()):
#   orchestrator
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class FRAME_FILE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BAND_LIST=None, COMPRESSION_MARGIN=None, RADIOMETRIC_MARGIN=None, EXTRA_GRANULES_LIST=None, DATA_BLOCK_LIST=None):
        self.original_tagname_ = None
        self.BAND_LIST = BAND_LIST
        self.COMPRESSION_MARGIN = COMPRESSION_MARGIN
        self.RADIOMETRIC_MARGIN = RADIOMETRIC_MARGIN
        self.EXTRA_GRANULES_LIST = EXTRA_GRANULES_LIST
        self.DATA_BLOCK_LIST = DATA_BLOCK_LIST
    def factory(*args_, **kwargs_):
        if FRAME_FILE.subclass:
            return FRAME_FILE.subclass(*args_, **kwargs_)
        else:
            return FRAME_FILE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BAND_LIST(self): return self.BAND_LIST
    def set_BAND_LIST(self, BAND_LIST): self.BAND_LIST = BAND_LIST
    def get_COMPRESSION_MARGIN(self): return self.COMPRESSION_MARGIN
    def set_COMPRESSION_MARGIN(self, COMPRESSION_MARGIN): self.COMPRESSION_MARGIN = COMPRESSION_MARGIN
    def get_RADIOMETRIC_MARGIN(self): return self.RADIOMETRIC_MARGIN
    def set_RADIOMETRIC_MARGIN(self, RADIOMETRIC_MARGIN): self.RADIOMETRIC_MARGIN = RADIOMETRIC_MARGIN
    def get_EXTRA_GRANULES_LIST(self): return self.EXTRA_GRANULES_LIST
    def set_EXTRA_GRANULES_LIST(self, EXTRA_GRANULES_LIST): self.EXTRA_GRANULES_LIST = EXTRA_GRANULES_LIST
    def get_DATA_BLOCK_LIST(self): return self.DATA_BLOCK_LIST
    def set_DATA_BLOCK_LIST(self, DATA_BLOCK_LIST): self.DATA_BLOCK_LIST = DATA_BLOCK_LIST
    def hasContent_(self):
        if (
            self.BAND_LIST is not None or
            self.COMPRESSION_MARGIN is not None or
            self.RADIOMETRIC_MARGIN is not None or
            self.EXTRA_GRANULES_LIST is not None or
            self.DATA_BLOCK_LIST is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FRAME_FILE', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FRAME_FILE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FRAME_FILE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FRAME_FILE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FRAME_FILE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BAND_LIST is not None:
            self.BAND_LIST.export(outfile, level, namespace_, name_='BAND_LIST', pretty_print=pretty_print)
        if self.COMPRESSION_MARGIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCOMPRESSION_MARGIN>%s</%sCOMPRESSION_MARGIN>%s' % (namespace_, self.gds_format_integer(self.COMPRESSION_MARGIN, input_name='COMPRESSION_MARGIN'), namespace_, eol_))
        if self.RADIOMETRIC_MARGIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRADIOMETRIC_MARGIN>%s</%sRADIOMETRIC_MARGIN>%s' % (namespace_, self.gds_format_integer(self.RADIOMETRIC_MARGIN, input_name='RADIOMETRIC_MARGIN'), namespace_, eol_))
        if self.EXTRA_GRANULES_LIST is not None:
            self.EXTRA_GRANULES_LIST.export(outfile, level, namespace_, name_='EXTRA_GRANULES_LIST', pretty_print=pretty_print)
        if self.DATA_BLOCK_LIST is not None:
            self.DATA_BLOCK_LIST.export(outfile, level, namespace_, name_='DATA_BLOCK_LIST', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='FRAME_FILE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BAND_LIST is not None:
            showIndent(outfile, level)
            outfile.write('BAND_LIST=model_.BAND_LISTType(\n')
            self.BAND_LIST.exportLiteral(outfile, level, name_='BAND_LIST')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COMPRESSION_MARGIN is not None:
            showIndent(outfile, level)
            outfile.write('COMPRESSION_MARGIN=%d,\n' % self.COMPRESSION_MARGIN)
        if self.RADIOMETRIC_MARGIN is not None:
            showIndent(outfile, level)
            outfile.write('RADIOMETRIC_MARGIN=%d,\n' % self.RADIOMETRIC_MARGIN)
        if self.EXTRA_GRANULES_LIST is not None:
            showIndent(outfile, level)
            outfile.write('EXTRA_GRANULES_LIST=model_.EXTRA_GRANULES_LISTType(\n')
            self.EXTRA_GRANULES_LIST.exportLiteral(outfile, level, name_='EXTRA_GRANULES_LIST')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DATA_BLOCK_LIST is not None:
            showIndent(outfile, level)
            outfile.write('DATA_BLOCK_LIST=model_.DATA_BLOCK_LISTType(\n')
            self.DATA_BLOCK_LIST.exportLiteral(outfile, level, name_='DATA_BLOCK_LIST')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BAND_LIST':
            obj_ = BAND_LISTType.factory()
            obj_.build(child_)
            self.BAND_LIST = obj_
            obj_.original_tagname_ = 'BAND_LIST'
        elif nodeName_ == 'COMPRESSION_MARGIN':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'COMPRESSION_MARGIN')
            self.COMPRESSION_MARGIN = ival_
        elif nodeName_ == 'RADIOMETRIC_MARGIN':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RADIOMETRIC_MARGIN')
            self.RADIOMETRIC_MARGIN = ival_
        elif nodeName_ == 'EXTRA_GRANULES_LIST':
            obj_ = EXTRA_GRANULES_LISTType.factory()
            obj_.build(child_)
            self.EXTRA_GRANULES_LIST = obj_
            obj_.original_tagname_ = 'EXTRA_GRANULES_LIST'
        elif nodeName_ == 'DATA_BLOCK_LIST':
            obj_ = DATA_BLOCK_LISTType.factory()
            obj_.build(child_)
            self.DATA_BLOCK_LIST = obj_
            obj_.original_tagname_ = 'DATA_BLOCK_LIST'
# end class FRAME_FILE


class BAND_LISTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BAND=None):
        self.original_tagname_ = None
        if BAND is None:
            self.BAND = []
        else:
            self.BAND = BAND
    def factory(*args_, **kwargs_):
        if BAND_LISTType.subclass:
            return BAND_LISTType.subclass(*args_, **kwargs_)
        else:
            return BAND_LISTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BAND(self): return self.BAND
    def set_BAND(self, BAND): self.BAND = BAND
    def add_BAND(self, value): self.BAND.append(value)
    def insert_BAND_at(self, index, value): self.BAND.insert(index, value)
    def replace_BAND_at(self, index, value): self.BAND[index] = value
    def hasContent_(self):
        if (
            self.BAND
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BAND_LISTType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BAND_LISTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BAND_LISTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BAND_LISTType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BAND_LISTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BAND_ in self.BAND:
            BAND_.export(outfile, level, namespace_, name_='BAND', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='BAND_LISTType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('BAND=[\n')
        level += 1
        for BAND_ in self.BAND:
            showIndent(outfile, level)
            outfile.write('model_.BANDType(\n')
            BAND_.exportLiteral(outfile, level, name_='BANDType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BAND':
            obj_ = BANDType.factory()
            obj_.build(child_)
            self.BAND.append(obj_)
            obj_.original_tagname_ = 'BAND'
# end class BAND_LISTType


class BANDType(GeneratedsSuper):
    """Identifier of the band"""
    subclass = None
    superclass = None
    def __init__(self, band_id=None, DETECTOR_LIST=None):
        self.original_tagname_ = None
        self.band_id = _cast(None, band_id)
        self.DETECTOR_LIST = DETECTOR_LIST
    def factory(*args_, **kwargs_):
        if BANDType.subclass:
            return BANDType.subclass(*args_, **kwargs_)
        else:
            return BANDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DETECTOR_LIST(self): return self.DETECTOR_LIST
    def set_DETECTOR_LIST(self, DETECTOR_LIST): self.DETECTOR_LIST = DETECTOR_LIST
    def get_band_id(self): return self.band_id
    def set_band_id(self, band_id): self.band_id = band_id
    def validate_A_BAND_NUMBER(self, value):
        # Validate type A_BAND_NUMBER, a restriction on xs:int.
        pass
    def hasContent_(self):
        if (
            self.DETECTOR_LIST is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BANDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BANDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BANDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BANDType'):
        if self.band_id is not None and 'band_id' not in already_processed:
            already_processed.add('band_id')
            outfile.write(' band_id=%s' % (quote_attrib(self.band_id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='BANDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DETECTOR_LIST is not None:
            self.DETECTOR_LIST.export(outfile, level, namespace_, name_='DETECTOR_LIST', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='BANDType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.band_id is not None and 'band_id' not in already_processed:
            already_processed.add('band_id')
            showIndent(outfile, level)
            outfile.write('band_id=%d,\n' % (self.band_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DETECTOR_LIST is not None:
            showIndent(outfile, level)
            outfile.write('DETECTOR_LIST=model_.DETECTOR_LISTType(\n')
            self.DETECTOR_LIST.exportLiteral(outfile, level, name_='DETECTOR_LIST')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('band_id', node)
        if value is not None and 'band_id' not in already_processed:
            already_processed.add('band_id')
            try:
                self.band_id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_A_BAND_NUMBER(self.band_id)    # validate type A_BAND_NUMBER
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DETECTOR_LIST':
            obj_ = DETECTOR_LISTType.factory()
            obj_.build(child_)
            self.DETECTOR_LIST = obj_
            obj_.original_tagname_ = 'DETECTOR_LIST'
# end class BANDType


class DETECTOR_LISTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DETECTOR=None):
        self.original_tagname_ = None
        if DETECTOR is None:
            self.DETECTOR = []
        else:
            self.DETECTOR = DETECTOR
    def factory(*args_, **kwargs_):
        if DETECTOR_LISTType.subclass:
            return DETECTOR_LISTType.subclass(*args_, **kwargs_)
        else:
            return DETECTOR_LISTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DETECTOR(self): return self.DETECTOR
    def set_DETECTOR(self, DETECTOR): self.DETECTOR = DETECTOR
    def add_DETECTOR(self, value): self.DETECTOR.append(value)
    def insert_DETECTOR_at(self, index, value): self.DETECTOR.insert(index, value)
    def replace_DETECTOR_at(self, index, value): self.DETECTOR[index] = value
    def hasContent_(self):
        if (
            self.DETECTOR
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DETECTOR_LISTType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DETECTOR_LISTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DETECTOR_LISTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DETECTOR_LISTType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DETECTOR_LISTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DETECTOR_ in self.DETECTOR:
            DETECTOR_.export(outfile, level, namespace_, name_='DETECTOR', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='DETECTOR_LISTType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('DETECTOR=[\n')
        level += 1
        for DETECTOR_ in self.DETECTOR:
            showIndent(outfile, level)
            outfile.write('model_.DETECTORType(\n')
            DETECTOR_.exportLiteral(outfile, level, name_='DETECTORType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DETECTOR':
            obj_ = DETECTORType.factory()
            obj_.build(child_)
            self.DETECTOR.append(obj_)
            obj_.original_tagname_ = 'DETECTOR'
# end class DETECTOR_LISTType


class DETECTORType(GeneratedsSuper):
    """detector identifier"""
    subclass = None
    superclass = None
    def __init__(self, detector_id=None, BEGIN_NB_LINES_TO_CUT=None, END_NB_LINES_TO_CUT=None):
        self.original_tagname_ = None
        self.detector_id = _cast(None, detector_id)
        self.BEGIN_NB_LINES_TO_CUT = BEGIN_NB_LINES_TO_CUT
        self.END_NB_LINES_TO_CUT = END_NB_LINES_TO_CUT
    def factory(*args_, **kwargs_):
        if DETECTORType.subclass:
            return DETECTORType.subclass(*args_, **kwargs_)
        else:
            return DETECTORType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BEGIN_NB_LINES_TO_CUT(self): return self.BEGIN_NB_LINES_TO_CUT
    def set_BEGIN_NB_LINES_TO_CUT(self, BEGIN_NB_LINES_TO_CUT): self.BEGIN_NB_LINES_TO_CUT = BEGIN_NB_LINES_TO_CUT
    def get_END_NB_LINES_TO_CUT(self): return self.END_NB_LINES_TO_CUT
    def set_END_NB_LINES_TO_CUT(self, END_NB_LINES_TO_CUT): self.END_NB_LINES_TO_CUT = END_NB_LINES_TO_CUT
    def get_detector_id(self): return self.detector_id
    def set_detector_id(self, detector_id): self.detector_id = detector_id
    def validate_BEGIN_NB_LINES_TO_CUTType(self, value):
        # Validate type BEGIN_NB_LINES_TO_CUTType, a restriction on xs:int.
        pass
    def validate_END_NB_LINES_TO_CUTType(self, value):
        # Validate type END_NB_LINES_TO_CUTType, a restriction on xs:int.
        pass
    def validate_A_DETECTOR_NUMBER(self, value):
        # Validate type A_DETECTOR_NUMBER, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.BEGIN_NB_LINES_TO_CUT is not None or
            self.END_NB_LINES_TO_CUT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DETECTORType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DETECTORType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DETECTORType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DETECTORType'):
        if self.detector_id is not None and 'detector_id' not in already_processed:
            already_processed.add('detector_id')
            outfile.write(' detector_id=%s' % (quote_attrib(self.detector_id), ))
    def exportChildren(self, outfile, level, namespace_='', name_='DETECTORType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BEGIN_NB_LINES_TO_CUT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBEGIN_NB_LINES_TO_CUT>%s</%sBEGIN_NB_LINES_TO_CUT>%s' % (namespace_, self.gds_format_integer(self.BEGIN_NB_LINES_TO_CUT, input_name='BEGIN_NB_LINES_TO_CUT'), namespace_, eol_))
        if self.END_NB_LINES_TO_CUT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEND_NB_LINES_TO_CUT>%s</%sEND_NB_LINES_TO_CUT>%s' % (namespace_, self.gds_format_integer(self.END_NB_LINES_TO_CUT, input_name='END_NB_LINES_TO_CUT'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='DETECTORType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.detector_id is not None and 'detector_id' not in already_processed:
            already_processed.add('detector_id')
            showIndent(outfile, level)
            outfile.write('detector_id="%s",\n' % (self.detector_id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BEGIN_NB_LINES_TO_CUT is not None:
            showIndent(outfile, level)
            outfile.write('BEGIN_NB_LINES_TO_CUT=%d,\n' % self.BEGIN_NB_LINES_TO_CUT)
        if self.END_NB_LINES_TO_CUT is not None:
            showIndent(outfile, level)
            outfile.write('END_NB_LINES_TO_CUT=%d,\n' % self.END_NB_LINES_TO_CUT)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('detector_id', node)
        if value is not None and 'detector_id' not in already_processed:
            already_processed.add('detector_id')
            self.detector_id = value
            self.validate_A_DETECTOR_NUMBER(self.detector_id)    # validate type A_DETECTOR_NUMBER
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BEGIN_NB_LINES_TO_CUT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'BEGIN_NB_LINES_TO_CUT')
            self.BEGIN_NB_LINES_TO_CUT = ival_
            self.validate_BEGIN_NB_LINES_TO_CUTType(self.BEGIN_NB_LINES_TO_CUT)    # validate type BEGIN_NB_LINES_TO_CUTType
        elif nodeName_ == 'END_NB_LINES_TO_CUT':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'END_NB_LINES_TO_CUT')
            self.END_NB_LINES_TO_CUT = ival_
            self.validate_END_NB_LINES_TO_CUTType(self.END_NB_LINES_TO_CUT)    # validate type END_NB_LINES_TO_CUTType
# end class DETECTORType


class EXTRA_GRANULES_LISTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GRANULE_ID=None):
        self.original_tagname_ = None
        if GRANULE_ID is None:
            self.GRANULE_ID = []
        else:
            self.GRANULE_ID = GRANULE_ID
    def factory(*args_, **kwargs_):
        if EXTRA_GRANULES_LISTType.subclass:
            return EXTRA_GRANULES_LISTType.subclass(*args_, **kwargs_)
        else:
            return EXTRA_GRANULES_LISTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GRANULE_ID(self): return self.GRANULE_ID
    def set_GRANULE_ID(self, GRANULE_ID): self.GRANULE_ID = GRANULE_ID
    def add_GRANULE_ID(self, value): self.GRANULE_ID.append(value)
    def insert_GRANULE_ID_at(self, index, value): self.GRANULE_ID.insert(index, value)
    def replace_GRANULE_ID_at(self, index, value): self.GRANULE_ID[index] = value
    def hasContent_(self):
        if (
            self.GRANULE_ID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EXTRA_GRANULES_LISTType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EXTRA_GRANULES_LISTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EXTRA_GRANULES_LISTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EXTRA_GRANULES_LISTType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EXTRA_GRANULES_LISTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GRANULE_ID_ in self.GRANULE_ID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGRANULE_ID>%s</%sGRANULE_ID>%s' % (namespace_, self.gds_format_string(quote_xml(GRANULE_ID_).encode(ExternalEncoding), input_name='GRANULE_ID'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='EXTRA_GRANULES_LISTType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('GRANULE_ID=[\n')
        level += 1
        for GRANULE_ID_ in self.GRANULE_ID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(GRANULE_ID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GRANULE_ID':
            GRANULE_ID_ = child_.text
            GRANULE_ID_ = self.gds_validate_string(GRANULE_ID_, node, 'GRANULE_ID')
            self.GRANULE_ID.append(GRANULE_ID_)
# end class EXTRA_GRANULES_LISTType


class DATA_BLOCK_LISTType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NUMBER=None, TOTAL_GRANULES_NUMBER=None, GRANULES_NUMBER=None):
        self.original_tagname_ = None
        self.NUMBER = NUMBER
        self.TOTAL_GRANULES_NUMBER = TOTAL_GRANULES_NUMBER
        if GRANULES_NUMBER is None:
            self.GRANULES_NUMBER = []
        else:
            self.GRANULES_NUMBER = GRANULES_NUMBER
    def factory(*args_, **kwargs_):
        if DATA_BLOCK_LISTType.subclass:
            return DATA_BLOCK_LISTType.subclass(*args_, **kwargs_)
        else:
            return DATA_BLOCK_LISTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NUMBER(self): return self.NUMBER
    def set_NUMBER(self, NUMBER): self.NUMBER = NUMBER
    def get_TOTAL_GRANULES_NUMBER(self): return self.TOTAL_GRANULES_NUMBER
    def set_TOTAL_GRANULES_NUMBER(self, TOTAL_GRANULES_NUMBER): self.TOTAL_GRANULES_NUMBER = TOTAL_GRANULES_NUMBER
    def get_GRANULES_NUMBER(self): return self.GRANULES_NUMBER
    def set_GRANULES_NUMBER(self, GRANULES_NUMBER): self.GRANULES_NUMBER = GRANULES_NUMBER
    def add_GRANULES_NUMBER(self, value): self.GRANULES_NUMBER.append(value)
    def insert_GRANULES_NUMBER_at(self, index, value): self.GRANULES_NUMBER.insert(index, value)
    def replace_GRANULES_NUMBER_at(self, index, value): self.GRANULES_NUMBER[index] = value
    def hasContent_(self):
        if (
            self.NUMBER is not None or
            self.TOTAL_GRANULES_NUMBER is not None or
            self.GRANULES_NUMBER
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DATA_BLOCK_LISTType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DATA_BLOCK_LISTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DATA_BLOCK_LISTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DATA_BLOCK_LISTType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DATA_BLOCK_LISTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NUMBER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespace_, self.gds_format_integer(self.NUMBER, input_name='NUMBER'), namespace_, eol_))
        if self.TOTAL_GRANULES_NUMBER is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_GRANULES_NUMBER>%s</%sTOTAL_GRANULES_NUMBER>%s' % (namespace_, self.gds_format_integer(self.TOTAL_GRANULES_NUMBER, input_name='TOTAL_GRANULES_NUMBER'), namespace_, eol_))
        for GRANULES_NUMBER_ in self.GRANULES_NUMBER:
            GRANULES_NUMBER_.export(outfile, level, namespace_, name_='GRANULES_NUMBER', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='DATA_BLOCK_LISTType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NUMBER is not None:
            showIndent(outfile, level)
            outfile.write('NUMBER=%d,\n' % self.NUMBER)
        if self.TOTAL_GRANULES_NUMBER is not None:
            showIndent(outfile, level)
            outfile.write('TOTAL_GRANULES_NUMBER=%d,\n' % self.TOTAL_GRANULES_NUMBER)
        showIndent(outfile, level)
        outfile.write('GRANULES_NUMBER=[\n')
        level += 1
        for GRANULES_NUMBER_ in self.GRANULES_NUMBER:
            showIndent(outfile, level)
            outfile.write('model_.GRANULES_NUMBERType(\n')
            GRANULES_NUMBER_.exportLiteral(outfile, level, name_='GRANULES_NUMBERType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NUMBER':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NUMBER')
            self.NUMBER = ival_
        elif nodeName_ == 'TOTAL_GRANULES_NUMBER':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TOTAL_GRANULES_NUMBER')
            self.TOTAL_GRANULES_NUMBER = ival_
        elif nodeName_ == 'GRANULES_NUMBER':
            obj_ = GRANULES_NUMBERType.factory()
            obj_.build(child_)
            self.GRANULES_NUMBER.append(obj_)
            obj_.original_tagname_ = 'GRANULES_NUMBER'
# end class DATA_BLOCK_LISTType


class GRANULES_NUMBERType(GeneratedsSuper):
    """datablock identifier"""
    subclass = None
    superclass = None
    def __init__(self, data_block=None, valueOf_=None):
        self.original_tagname_ = None
        self.data_block = _cast(int, data_block)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if GRANULES_NUMBERType.subclass:
            return GRANULES_NUMBERType.subclass(*args_, **kwargs_)
        else:
            return GRANULES_NUMBERType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_data_block(self): return self.data_block
    def set_data_block(self, data_block): self.data_block = data_block
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GRANULES_NUMBERType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GRANULES_NUMBERType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GRANULES_NUMBERType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GRANULES_NUMBERType'):
        if self.data_block is not None and 'data_block' not in already_processed:
            already_processed.add('data_block')
            outfile.write(' data_block="%s"' % self.gds_format_integer(self.data_block, input_name='data_block'))
    def exportChildren(self, outfile, level, namespace_='', name_='GRANULES_NUMBERType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='GRANULES_NUMBERType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.data_block is not None and 'data_block' not in already_processed:
            already_processed.add('data_block')
            showIndent(outfile, level)
            outfile.write('data_block=%d,\n' % (self.data_block,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('data_block', node)
        if value is not None and 'data_block' not in already_processed:
            already_processed.add('data_block')
            try:
                self.data_block = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class GRANULES_NUMBERType


GDSClassesMapping = {
    'EXTRA_GRANULES_LIST': EXTRA_GRANULES_LISTType,
    'BAND_LIST': BAND_LISTType,
    'GRANULES_NUMBER': GRANULES_NUMBERType,
    'BAND': BANDType,
    'DATA_BLOCK_LIST': DATA_BLOCK_LISTType,
    'DETECTOR_LIST': DETECTOR_LISTType,
    'DETECTOR': DETECTORType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FRAME_FILE'
        rootClass = FRAME_FILE
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FRAME_FILE'
        rootClass = FRAME_FILE
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FRAME_FILE'
        rootClass = FRAME_FILE
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FRAME_FILE'
        rootClass = FRAME_FILE
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from FrameFileReader import *\n\n')
        sys.stdout.write('import FrameFileReader as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "BANDType",
    "BAND_LISTType",
    "DATA_BLOCK_LISTType",
    "DETECTORType",
    "DETECTOR_LISTType",
    "EXTRA_GRANULES_LISTType",
    "FRAME_FILE",
    "GRANULES_NUMBERType"
]
